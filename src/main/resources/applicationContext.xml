<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:provider.properties"/>
    <import resource="db-config.xml"/>
    <import resource="provider.xml"/>
    <import resource="spring-jedis.xml"/>
    <import resource="kafka-provider.xml"/>
    <import resource="kafka-consumer.xml"/>
    <import resource="spring-hive.xml"/>
    <import resource="spring-hbase.xml"/>

    <!-- 动态数据源 -->
    <bean id="dynamicDataSource" class="com.shop.dao.datasource.DynamicDataSource">
        <!-- 通过key-value关联数据源 -->
        <property name="targetDataSources">
            <map>
                <entry key="readWriteDS" value-ref="dataSourceMaster"></entry>
                <entry key="readDS" value-ref="dataSourceSlave"></entry>
                <entry key="numStatistics" value-ref="numStatistics"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceMaster" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:com/shop/mapper/**/*.xml</value>
            </list>
        </property>
        <property name="typeAliasesPackage" value="com.shop.entity"/>
        <property name="plugins">
            <list>
                <bean class="com.github.pagehelper.PageHelper">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            dialect=mysql
                            <!--reasonable=true-->
                            <!--supportMethodsArguments=true-->
                            <!--params=count=countSql-->
                            <!--autoRuntimeDialect=true-->
                        </value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.shop.dao"/>
     
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类,
         若使用此配置，则dao下的类都需继承此接口
        -->
        <!--<property name="markerInterface" value="MyMapper"/>-->
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口-->
        <!--<property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>-->
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>


    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--<tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />

            <tx:method name="query*" read-only="true"/>
            <tx:method name="get*" read-only="true" />
            <tx:method name="count*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="list*" read-only="true" />-->

            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:aspectj-autoproxy/>
    <bean id="dataSourceAspect" class="com.shop.dao.datasource.DataSourceAspect" />
    <aop:config>
        <!--对业务逻辑层实施事务-->
        <aop:pointcut id="txPointcut" expression="(execution(* com.shop.service..*.*(..))) or (execution(* com.bestone.lulu.impl..*.*(..)))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>

        <!--通过AOP切面实现读/写库选择-->
        <aop:aspect order="0" ref="dataSourceAspect">
            <aop:before pointcut-ref="txPointcut" method="before"/>
        </aop:aspect>
    </aop:config>

</beans>